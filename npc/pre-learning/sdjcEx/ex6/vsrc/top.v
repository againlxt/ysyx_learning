/* Generated by Yosys 0.9 (git sha1 1979e0b) */

(* cells_not_processed =  1  *)
(* src = "bcd7seg.v:1" *)
module bcd7seg(idata, enable, seg);
  (* src = "bcd7seg.v:6" *)
  reg [7:0] _0_;
  (* src = "bcd7seg.v:6" *)
  reg [7:0] _1_;
  (* src = "bcd7seg.v:6" *)
  reg [7:0] _2_;
  (* src = "bcd7seg.v:8" *)
  wire _3_;
  (* src = "bcd7seg.v:31" *)
  wire [7:0] _4_;
  (* src = "bcd7seg.v:3" *)
  input enable;
  (* src = "bcd7seg.v:2" *)
  input [3:0] idata;
  (* src = "bcd7seg.v:4" *)
  output [7:0] seg;
  reg [7:0] seg;
  assign _3_ = ! (* src = "bcd7seg.v:8" *) enable;
  assign _4_ = ~ (* src = "bcd7seg.v:31" *) _2_;
  always @* begin
    _0_ = _1_;
    (* src = "bcd7seg.v:8" *)
    casez (_3_)
      /* src = "bcd7seg.v:8" */
      1'h1:
        begin
          _1_ = 8'h00;
        end
      /* src = "bcd7seg.v:10" */
      default:
        begin
          _1_ = _4_;
          (* src = "bcd7seg.v:12" *)
          casez (idata)
            /* src = "bcd7seg.v:13" */
            4'h0:
              begin
                _2_ = 8'hfc;
              end
            /* src = "bcd7seg.v:14" */
            4'h1:
              begin
                _2_ = 8'h60;
              end
            /* src = "bcd7seg.v:15" */
            4'h2:
              begin
                _2_ = 8'hda;
              end
            /* src = "bcd7seg.v:16" */
            4'h3:
              begin
                _2_ = 8'hf2;
              end
            /* src = "bcd7seg.v:17" */
            4'h4:
              begin
                _2_ = 8'h66;
              end
            /* src = "bcd7seg.v:18" */
            4'h5:
              begin
                _2_ = 8'hb6;
              end
            /* src = "bcd7seg.v:19" */
            4'h6:
              begin
                _2_ = 8'hbe;
              end
            /* src = "bcd7seg.v:20" */
            4'h7:
              begin
                _2_ = 8'he0;
              end
            /* src = "bcd7seg.v:21" */
            4'h8:
              begin
                _2_ = 8'hfe;
              end
            /* src = "bcd7seg.v:22" */
            4'h9:
              begin
                _2_ = 8'hf6;
              end
            /* src = "bcd7seg.v:23" */
            4'ha:
              begin
                _2_ = 8'hee;
              end
            /* src = "bcd7seg.v:24" */
            4'hb:
              begin
                _2_ = 8'h3e;
              end
            /* src = "bcd7seg.v:25" */
            4'hc:
              begin
                _2_ = 8'h9c;
              end
            /* src = "bcd7seg.v:26" */
            4'hd:
              begin
                _2_ = 8'h7a;
              end
            /* src = "bcd7seg.v:27" */
            4'he:
              begin
                _2_ = 8'h9e;
              end
            /* src = "bcd7seg.v:28" */
            4'hf:
              begin
                _2_ = 8'h8e;
              end
            /* src = "bcd7seg.v:29" */
            default:
              begin
                _2_ = 8'h00;
              end
          endcase
        end
    endcase
  end
  always @* begin
      seg <= _0_;
  end
endmodule

(* cells_not_processed =  1  *)
(* src = "lfs8reg.v:2" *)
module lfs8reg(clk, rst, idata, odata);
  (* src = "lfs8reg.v:25" *)
  reg [7:0] _0_;
  (* src = "lfs8reg.v:17" *)
  reg [7:0] _1_;
  (* src = "lfs8reg.v:14" *)
  wire _2_;
  (* src = "lfs8reg.v:14" *)
  wire _3_;
  (* src = "lfs8reg.v:14" *)
  wire _4_;
  (* src = "lfs8reg.v:3" *)
  input clk;
  (* src = "lfs8reg.v:6" *)
  input [7:0] idata;
  (* src = "lfs8reg.v:12" *)
  reg [7:0] idata_reg;
  (* src = "lfs8reg.v:13" *)
  wire move_bit;
  (* src = "lfs8reg.v:8" *)
  output [7:0] odata;
  (* src = "lfs8reg.v:11" *)
  reg [7:0] odata_reg;
  (* src = "lfs8reg.v:4" *)
  input rst;
  assign _2_ = idata_reg[4] ^ (* src = "lfs8reg.v:14" *) idata_reg[3];
  assign _3_ = _2_ ^ (* src = "lfs8reg.v:14" *) idata_reg[2];
  assign _4_ = _3_ ^ (* src = "lfs8reg.v:14" *) idata_reg[0];
  always @* begin
    _1_ = odata_reg;
    (* src = "lfs8reg.v:18" *)
    casez (rst)
      /* src = "lfs8reg.v:18" */
      1'h1:
          _1_ = idata_reg;
      /* src = "lfs8reg.v:20" */
      default:
          _1_ = { move_bit, idata_reg[7:1] };
    endcase
  end
  always @(posedge clk) begin
      odata_reg <= _1_;
  end
  always @(posedge rst) begin
      odata_reg <= _1_;
  end
  always @* begin
    _0_ = idata_reg;
    (* src = "lfs8reg.v:26" *)
    casez (rst)
      /* src = "lfs8reg.v:26" */
      1'h1:
          _0_ = idata;
      /* src = "lfs8reg.v:28" */
      default:
          _0_ = odata;
    endcase
  end
  always @(posedge clk) begin
      idata_reg <= _0_;
  end
  always @(posedge rst) begin
      idata_reg <= _0_;
  end
  assign move_bit = _4_;
  assign odata = odata_reg;
endmodule
